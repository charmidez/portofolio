{
  /** 
   * 
   * export function UtiliserNextJS() {
  return (
    <div>
      <p>
        Next.js propose un composant natif appel√©{" "}
        <span className="font-light text-violet-600">{"<Image />"}</span> qui
        permet d‚Äôoptimiser les performances de chargement des images. <br />{" "}
        Voici ses principaux avantages :
      </p>
      <ul>
        <li>Chargement paresseux (lazy loading) automatique</li>
        <li>Redimensionnement d‚Äôimage c√¥t√© serveur</li>
        <li>Support de formats modernes comme WebP ou AVIF</li>
        <li>Optimisation SEO et accessibilit√©</li>
        <li>Mise en cache automatique et responsive facile</li>
      </ul>
    </div>
  );
}
   * 
  */
}


export function ComprendreGitEtPlateformes() {
  return (
    <div>
      <p className="mb-4">
        Git est un syst√®me de gestion de version distribu√©, cr√©√© par Linus
        Torvalds, permettant √† des d√©veloppeurs de collaborer efficacement sur
        du code source, en gardant un historique clair et tra√ßable des
        modifications.
      </p>

      <img
        src="/assets/featured/git3.png"
        alt="Illustration de Git"
        className="rounded-xl shadow-md w-40 mb-6"
      />

      <h2 className="text-xl font-semibold mb-2">
        Quelle est la diff√©rence entre Git, GitHub, GitLab et Bitbucket ?
      </h2>
      <ul className="list-disc pl-6 mb-6">
        <li>
          <strong>Git</strong> est le **logiciel de gestion de version** utilis√©
          localement ou √† travers des plateformes.
        </li>
        <li>
          <strong>GitHub</strong> est une plateforme en ligne qui h√©berge des
          d√©p√¥ts Git, avec un focus sur l‚Äô**open source** et la **communaut√©**.
        </li>
        <li>
          <strong>GitLab</strong> est une alternative open source qui inclut
          **CI/CD int√©gr√©** et des fonctionnalit√©s DevOps.
        </li>
        <li>
          <strong>Bitbucket</strong> est une solution d‚ÄôAtlassian qui s‚Äôint√®gre
          tr√®s bien √† **Jira**, et supporte **Git et Mercurial** (avant 2020).
        </li>
      </ul>

      <img
        src="/assets/featured/git2.webp"
        alt="Comparaison GitHub, GitLab et Bitbucket"
        className="rounded-xl shadow-md mb-6 w-70"
      />

      <h2 className="text-xl font-semibold mb-2">Pourquoi utiliser chacun ?</h2>
      <ul className="list-disc pl-6 mb-6">
        <li>
          <strong>GitHub</strong> : parfait pour les projets open source, gr√¢ce
          √† sa **communaut√© massive**, ses **actions GitHub**, et son
          int√©gration avec Copilot.
        </li>
        <li>
          <strong>GitLab</strong> : id√©al pour les entreprises cherchant une
          **cha√Æne CI/CD compl√®te** et un contr√¥le total (auto-h√©bergement
          possible).
        </li>
        <li>
          <strong>Bitbucket</strong> : recommand√© pour les √©quipes d√©j√† engag√©es
          dans l‚Äô**√©cosyst√®me Atlassian** (Jira, Confluence).
        </li>
      </ul>

      <h2 className="text-xl font-semibold mb-2">
        Quel outil pour quel domaine ?
      </h2>
      <ul className="list-disc pl-6 mb-6">
        <li>
          <strong>GitHub</strong> : D√©veloppement open source, biblioth√®ques
          publiques, communaut√©s.
        </li>
        <li>
          <strong>GitLab</strong> : DevOps, int√©gration continue, d√©ploiement
          automatis√©.
        </li>
        <li>
          <strong>Bitbucket</strong> : Gestion de projet d‚Äôentreprise avec suivi
          de t√¢ches, surtout si vous utilisez Jira.
        </li>
      </ul>

      <p>
        Quel que soit votre choix, comprendre les particularit√©s de chaque
        plateforme vous permettra de mieux organiser votre travail d‚Äô√©quipe,
        s√©curiser votre code, et acc√©l√©rer vos livraisons.
      </p>
    </div>
  );
}

export function KtorVsSpringArticle() {
  return (
    <div className="prose max-w-none">
      <p className="mb-4">
        Kotlin est devenu un langage populaire pour le d√©veloppement backend,
        notamment gr√¢ce √† deux frameworks :{" "}
        <span className="font-medium text-violet-600">Ktor</span> et{" "}
        <span className="font-medium text-green-600">Spring Boot</span>. Mais
        lequel choisir ?
      </p>

      <div className="flex lg:flex-row flex-col gap-4 lg:gap-8 mb-4">
        {/*Spring boot*/}
        <div className="flex flex-col gap-4">
          <h2 className="font-semibold">üå± Spring Boot : le g√©ant mature et robuste</h2>
          <img
            src="/assets/icon/spring.svg"
            alt="Logo Spring"
            className="w-40 my-4"
          />
          <p>
            Spring Boot est un framework Java/Kotlin tr√®s riche, qui permet de
            d√©velopper des API, des microservices, ou m√™me des applications
            compl√®tes. Il est bas√© sur le c√©l√®bre √©cosyst√®me Spring.
          </p>
          <ul>
            <li>‚úÖ √ânorme √©cosyst√®me (Spring Security, Data, etc.)</li>
            <li>‚úÖ Maturit√© et communaut√© tr√®s active</li>
            <li>
              ‚úÖ Int√©gration native avec des bases de donn√©es, Kafka, etc.
            </li>
            <li>‚ö†Ô∏è Courbe d'apprentissage parfois raide</li>
            <li>‚ö†Ô∏è Moins flexible, plus "configuration par convention"</li>
          </ul>

          <h2>üß™ Exemple de code : Hello World</h2>
          <h4>Avec Spring Boot</h4>
          <pre className="bg-gray-900 text-white p-4 rounded-md overflow-x-auto text-sm">
            <code>
              {`@RestController
@RequestMapping("/api")
class HelloController {
  @GetMapping("/hello")
  fun hello() = "Hello from Spring!"
}`}
            </code>
          </pre>
        </div>

        {/*Ktor*/}
        <div className="flex flex-col gap-4">
          <h2 className="font-semibold">üöÄ Ktor : la modernit√© l√©g√®re made in JetBrains</h2>
          <img
            src="/assets/icon/ktor.svg"
            alt="Logo Ktor"
            className="w-40 my-4 bg-white p-2 rounded-md"
          />
          <p>
            D√©velopp√© par JetBrains (les cr√©ateurs de Kotlin),{" "}
            <strong>Ktor</strong> est un framework minimaliste et asynchrone
            pour cr√©er des APIs HTTP en Kotlin pur.
          </p>
          <ul>
            <li>‚úÖ L√©ger, rapide √† d√©marrer</li>
            <li>‚úÖ Tr√®s modulaire et asynchrone</li>
            <li>‚úÖ Id√©al pour des microservices ou API custom</li>
            <li>‚ö†Ô∏è Moins de ressources communautaires</li>
            <li>‚ö†Ô∏è Moins d‚Äôoutils "cl√©s en main" que Spring</li>
          </ul>

          <h2>üß™ Exemple de code : Hello World</h2>

          <h4>Avec Ktor</h4>
          <pre className="bg-gray-900 text-white p-4 rounded-md overflow-x-auto text-sm">
            <code>
              {`fun main() {
  embeddedServer(Netty, port = 8080) {
    routing {
      get("/hello") {
        call.respondText("Hello from Ktor!")
      }
    }
  }.start(wait = true)
}`}
            </code>
          </pre>
        </div>
      </div>

      <h2>ü§î Alors, lequel choisir ?</h2>
      <table className="table-auto w-full border mt-4 text-sm">
        <thead>
          <tr className="bg-gray-100">
            <th className="border p-2">Crit√®re</th>
            <th className="border p-2">Ktor</th>
            <th className="border p-2">Spring Boot</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className="border p-2">Performance</td>
            <td className="border p-2">Haute (l√©ger)</td>
            <td className="border p-2">Bonne</td>
          </tr>
          <tr>
            <td className="border p-2">Communaut√©</td>
            <td className="border p-2">Moyenne</td>
            <td className="border p-2">Tr√®s grande</td>
          </tr>
          <tr>
            <td className="border p-2">Modularit√©</td>
            <td className="border p-2">Totale</td>
            <td className="border p-2">Structur√©e</td>
          </tr>
          <tr>
            <td className="border p-2">Courbe d'apprentissage</td>
            <td className="border p-2">Simple</td>
            <td className="border p-2">Interm√©diaire</td>
          </tr>
        </tbody>
      </table>

      <h2 className="mt-8">üîö Conclusion</h2>
      <p>
        Choisissez <strong>Ktor</strong> si vous recherchez une API rapide,
        l√©g√®re et 100% Kotlin, notamment pour des microservices modernes.{" "}
        Pr√©f√©rez <strong>Spring Boot</strong> si vous avez besoin d‚Äôun framework
        complet, √©prouv√© et puissant pour des applications d‚Äôentreprise.
      </p>

      <p className="mt-4">
        üîó Ressources utiles :
        <ul className="list-disc pl-6 mt-2">
          <li>
            <a
              href="https://ktor.io"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline"
            >
              Site officiel de Ktor
            </a>
          </li>
          <li>
            <a
              href="https://spring.io/projects/spring-boot"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline"
            >
              Site officiel de Spring Boot
            </a>
          </li>
        </ul>
      </p>
    </div>
  );
}

export function UtiliserNextJS() {
  return (
    <div className="prose max-w-none">
      <p>
        Dans le d√©veloppement web moderne, les performances et l‚Äôexp√©rience
        utilisateur sont des enjeux cruciaux. C‚Äôest pourquoi{" "}
        <strong>Next.js</strong>, le framework React populaire, propose un
        composant natif appel√©{" "}
        <code className="text-violet-600">&lt;Image /&gt;</code> pour g√©rer les
        images de fa√ßon intelligente.
      </p>

      <h2>üì∑ Qu‚Äôest-ce que le composant &lt;Image /&gt; ?</h2>
      <img
        src="/assets/featured/nextjs-image.webp"
        alt="Image optimisation Next.js"
        className="rounded-lg my-4 shadow"
      />
      <p>
        Il s‚Äôagit d‚Äôun composant optimis√© qui remplace avantageusement la
        balise HTML classique <code>&lt;img /&gt;</code>, avec des
        fonctionnalit√©s int√©gr√©es :
      </p>

      <ul>
        <li>‚úÖ Chargement paresseux (lazy loading)</li>
        <li>‚úÖ Redimensionnement c√¥t√© serveur (optimisation)</li>
        <li>‚úÖ Conversion automatique en WebP/AVIF</li>
        <li>‚úÖ Mise en cache intelligente</li>
        <li>‚úÖ Support responsive natif</li>
        <li>‚úÖ Accessibilit√© am√©lior√©e (avec priorit√©)</li>
      </ul>

      <h2>üß™ Exemple d‚Äôutilisation basique</h2>
      <pre className="bg-gray-900 text-white p-4 rounded-md overflow-x-auto text-sm">
        <code>
{`import Image from 'next/image'

export default function Exemple() {
  return (
    <Image
      src="/mon-image.jpg"
      alt="Texte alternatif"
      width={800}
      height={600}
    />
  )
}`}
        </code>
      </pre>

      <h2>üí° Comparaison avec &lt;img&gt;</h2>
      <table className="table-auto w-full border mt-4 text-sm">
        <thead>
          <tr className="bg-gray-100">
            <th className="border p-2">Fonctionnalit√©</th>
            <th className="border p-2">&lt;img&gt;</th>
            <th className="border p-2">&lt;Image /&gt;</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td className="border p-2">Chargement paresseux</td>
            <td className="border p-2">‚ùå</td>
            <td className="border p-2">‚úÖ</td>
          </tr>
          <tr>
            <td className="border p-2">Optimisation taille/format</td>
            <td className="border p-2">‚ùå</td>
            <td className="border p-2">‚úÖ</td>
          </tr>
          <tr>
            <td className="border p-2">Conversion WebP</td>
            <td className="border p-2">‚ùå</td>
            <td className="border p-2">‚úÖ</td>
          </tr>
          <tr>
            <td className="border p-2">SEO et accessibilit√©</td>
            <td className="border p-2">‚ö†Ô∏è</td>
            <td className="border p-2">‚úÖ</td>
          </tr>
        </tbody>
      </table>

      <h2>üîé √Ä retenir</h2>
      <p>
        Le composant <code>&lt;Image /&gt;</code> de Next.js est indispensable
        pour toute application qui mise sur :
      </p>
      <ul>
        <li>‚ö° Des temps de chargement rapides</li>
        <li>üì± Une interface responsive optimale</li>
        <li>üîç Un bon r√©f√©rencement naturel (SEO)</li>
      </ul>

      <p className="mt-6">
        Pour aller plus loin :
        <ul className="list-disc pl-6 mt-2">
          <li>
            <a
              href="https://nextjs.org/docs/app/building-your-application/optimizing/images"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline"
            >
              Documentation officielle Next.js sur l‚Äôoptimisation d‚Äôimage
            </a>
          </li>
          <li>
            <a
              href="https://vercel.com/docs/image-optimization"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 underline"
            >
              Guide Vercel sur les performances images
            </a>
          </li>
        </ul>
      </p>

      <h2 className="mt-8">üß© Conclusion</h2>
      <p>
        En production, √©viter le composant <code>&lt;img&gt;</code> devient une
        √©vidence si vous utilisez Next.js. Son composant{" "}
        <code>&lt;Image /&gt;</code> vous assure une application rapide,
        accessible et bien r√©f√©renc√©e. Un choix simple pour un rendu pro. üåçüöÄ
      </p>
    </div>
  );
}

